<?php
/**
 * EBS payment module processor
 *
 * @author Saradha
 *
 *
 */


class EBS extends PaymentModule
{
	private	$_html = '';
	private $_postErrors = array();
	private $_responseReasonText = null;

	public function __construct()
	{
		$this->name = 'EBS';
		$this->tab = 'Payment';
		$this->version = '2.5';

        parent::__construct();
		$this->idOrderState = Configuration::get('EBS_ID_ORDER_STATE');
        /* The parent construct is required for translations */
		$this->page = basename(__FILE__, '.php');
        $this->displayName = $this->l('EBS');
        $this->description = $this->l('Accepts payments by EBS');
	}

	public function getEBSUrl()
	{
			return 'https://secure.ebs.in/pg/ma/sale/pay';
	}

	public function install()
	{

		if (parent::install())
		{
			Configuration::updateValue('ACCOUNT_ID', '');
			Configuration::updateValue('SECRET_KEY', '');
			Configuration::updateValue('MODE', 'TEST');
			Configuration::updateValue('EBS_ID_ORDER_SUCCESS',$this->getOrderState());
			Configuration::updateValue('EBS_ID_ORDER_FAILED',$this->getOrderState()+1);
			
			
			$this->registerHook('payment');
			
			
			Db::getInstance()->Execute
			('
				INSERT INTO `' . _DB_PREFIX_ . 'order_state`
			( `id_order_state`,`invoice`, `send_email`, `color`, `unremovable`, `logable`, `delivery`)
				VALUES
			('.Configuration::get('EBS_ID_ORDER_SUCCESS').',0, 0, \'#33FF99\', 0, 0,0);
			');
			Db::getInstance()->Execute
				('
					INSERT INTO `' . _DB_PREFIX_ . 'order_state_lang` 
				(`id_order_state`, `id_lang`, `name`, `template`) 
					VALUES 
				('.Configuration::get('EBS_ID_ORDER_SUCCESS').', 1, \'Payment accepted\', \'payment\')');
				
			
			Db::getInstance()->Execute
			('
				INSERT INTO `' . _DB_PREFIX_ . 'order_state`
			( `id_order_state`,`invoice`, `send_email`, `color`, `unremovable`, `logable`, `delivery`)
				VALUES
			('.Configuration::get('EBS_ID_ORDER_FAILED').',0, 0, \'#33FF99\', 0, 0,0);
			');
			Db::getInstance()->Execute
				('
					INSERT INTO `' . _DB_PREFIX_ . 'order_state_lang` 
				(`id_order_state`, `id_lang`, `name`, `template`) 
					VALUES 
				('.Configuration::get('EBS_ID_ORDER_FAILED').', 1, \'Payment Failed\', \'payment\')');
			
			
			
			
			
			
			return true;
		}
		else 
			return false;
	}

	public function uninstall()
	{

		Db::getInstance()->Execute
				('
					DELETE FROM `' . _DB_PREFIX_ . 'order_state_lang` 
					 WHERE id_order_state = '.Configuration::get('EBS_ID_ORDER_SUCCESS').' and id_lang = 1' );
		Db::getInstance()->Execute
				('
					DELETE FROM `' . _DB_PREFIX_ . 'order_state_lang` 
					 WHERE id_order_state = '.Configuration::get('EBS_ID_ORDER_FAILED').' and id_lang = 1');
				
		
		if (!Configuration::deleteByName('ACCOUNT_ID') OR
			!Configuration::deleteByName('SECRET_KEY') OR
			!Configuration::deleteByName('MODE') OR 
			!Configuration::deleteByName('EBS_ID_ORDER_SUCCESS') OR
			!Configuration::deleteByName('EBS_ID_ORDER_FAILED') OR
			!parent::uninstall())
			return false;
		return true;
	}
	public function getOrderState()
	{

			$id=Db::getInstance()->getRow
			('
				SELECT max(id_order_state) as id FROM `' . _DB_PREFIX_ . 'order_state`
			');
			return $id['id']+1;

		
	}
	public function getContent()
	{
		$this->_html = '<h2>E-Billing Solution</h2>';
		if (isset($_POST['submitEBS']))
		{
			if (empty($_POST['account_id']))
				$this->_postErrors[] = $this->l('Account ID is required.');
			if (empty($_POST['secret_key']))
				$this->_postErrors[] = $this->l('EBS secret key is required.');
			if (empty($_POST['mode']))
			{
				$_POST['mode'] = "LIVE";
			}
			else
				$_POST['mode']="TEST";
				
			if (!sizeof($this->_postErrors))
			{
				Configuration::updateValue('ACCOUNT_ID', $_POST['account_id']);
				Configuration::updateValue('SECRET_KEY', $_POST['secret_key']);
				Configuration::updateValue('MODE', $_POST['mode']);
				$this->displayConf();
			}
			else
				$this->displayErrors();
		
		}
		$this->displayEBS();
		$this->displayFormSettings();
		return $this->_html;
	}

	public function displayConf()
	{
		$this->_html .= '
		<div class="conf confirm">
			<img src="../img/admin/ok.gif" alt="'.$this->l('Confirmation').'" />
			'.$this->l('Settings updated').'
		</div>';
	}

	public function displayErrors()
	{
		$nbErrors = sizeof($this->_postErrors);
		$this->_html .= '
		<div class="alert error">
			<h3>'.($nbErrors > 1 ? $this->l('There are') : $this->l('There is')).' '.$nbErrors.' '.($nbErrors > 1 ? $this->l('errors') : $this->l('error')).'</h3>
			<ol>';
		foreach ($this->_postErrors AS $error)
			$this->_html .= '<li>'.$error.'</li>';
		$this->_html .= '
			</ol>
		</div>';
	}


	public function displayEBS()
	{
		$this->_html .= '
		<img src="../modules/EBS/logo.gif" style="float:left; padding: 10px 0px; margin-right:15px;" />
		<b>'.$this->l('This module allows you to accept payments by EBS.').'</b><br /><br />
		'.$this->l('If the client chooses this payment mode, your EBS account will be automatically credited.').'<br />
		'.$this->l('You need to configure your EBS account first before using this module.').'
		<br /><br /><br />';
	}

	public function displayFormSettings()
	{
		$conf = Configuration::getMultiple(array('ACCOUNT_ID',
												'SECRET_KEY',
												'MODE'));
												
		$account_id = array_key_exists('account_id', $_POST) ? $_POST['account_id'] : (array_key_exists('ACCOUNT_ID', $conf) ? $conf['ACCOUNT_ID'] : '');
		$secret_key = array_key_exists('secret_key', $_POST) ? $_POST['secret_key'] : (array_key_exists('SECRET_KEY', $conf) ? $conf['SECRET_KEY'] : '');
		$mode =array_key_exists('mode', $_POST) ? $_POST['mode'] : (array_key_exists('EBS_mode', $conf) ? $conf['EBS_mode'] : '');
		
		
		if($mode=="LIVE")
			$mode="";
		else if($mode=="TEST")
			$mode="1";
		
		$currency = array_key_exists('currency', $_POST) ? $_POST['currency'] : (array_key_exists('EBS_CURRENCY', $conf) ? $conf['EBS_CURRENCY'] : 'prestashop');

		$this->_html .= '
		<form action="'.$_SERVER['REQUEST_URI'].'" name="submitEBS" method="post">
		<fieldset>
			<legend><img src="../img/admin/contact.gif" />'.$this->l('Settings').'</legend>
			<label>'.$this->l('Account ID').'</label>
			<div class="margin-form"><input type="text" name="account_id" value="'.$account_id.'" size="4" /></div>
			<label>'.$this->l('Secret Key').'</label>
			<div class="margin-form"><input type="text" size="33" name="secret_key" value="'.$secret_key.'" /></div>
			
			<label>'.$this->l('Test Mode').'</label>
			<div class="margin-form">
			
			<input type="checkbox" name="mode" "'.($mode ? 'checked="checked"' : '').' /> 
			 
			</div>
			<br /><center><input type="submit" name="submitEBS" value="'.$this->l('Update settings').'" class="button" /></center>
		</fieldset>
		</form><br /><br />
		';
	}

	public function hookPayment($params)
	{
		global $smarty,$cart;
		$countryarray=array("IN"=>"IND","DE"=>"DEU","BR"=>"BRA","DE"=>"DEU","AT"=>"AUT","BE"=>"BEL","CA"=>"CAN","CN"=>"CHN","ES"=>"ESP","FI"=>"FIN","FR"=>"FRA","GR"=>"GRC","IT"=>"ITA","JP"=>"JPN","LU"=>"LUX","NL"=>"NLD","PL"=>"POL","PT"=>"PRT","CZ"=>"CZE","GB"=>"GBR","SE"=>"SWE","CH"=>"CHE","DK"=>"DNK","US"=>"USA","HK"=>"HKG","NO"=>"NOR","AU"=>"AUS","SG"=>"SGP","IE"=>"IRL","NZ"=>"NZL","KR"=>"KOR","IL"=>"ISR","ZA"=>"ZAF","NG"=>"NGA","CI"=>"CIV","TG"=>"TGO","BO"=>"BOL","MU"=>"MUS","RO"=>"ROU","SK"=>"SVK","DZ"=>"DZA","AS"=>"ASM","AD"=>"AND","AO"=>"AGO","AI"=>"AIA","AG"=>"ATG","AR"=>"ARG","AM"=>"ARM","AW"=>"ARW","AZ"=>"AZE","BS"=>"BHS","BH"=>"BHR","BD"=>"BGD","BB"=>"BRB","BY"=>"BLR","BZ"=>"BLZ","BJ"=>"BEN","BM"=>"BMU","BT"=>"BTN","BW"=>"BWA","BN"=>"BRN","BF"=>"BFA","MM"=>"MMR","BI"=>"BDI","KH"=>"KHM","CM"=>"CMR","CV"=>"CPV","CF"=>"CAF","TD"=>"TCD","CL"=>"CHL","CO"=>"COL","KM"=>"COM","CD"=>"COD","CG"=>"COG","CR"=>"CRI","HR"=>"HRV","CU"=>"CUB","CY"=>"CYP","DJ"=>"DJI","DM"=>"DMA","DO"=>"DOM","TL"=>"TLS","EC"=>"ECU","EG"=>"EGY","SV"=>"SLV","GQ"=>"GNQ","ER"=>"ERI","EE"=>"EST","ET"=>"ETH","FK"=>"FLK","FO"=>"FRO","FJ"=>"FJI","GA"=>"GAB","GM"=>"GMB","GE"=>"GEO","GH"=>"GHA","GD"=>"GRD","GL"=>"GRL","GI"=>"GIB","GP"=>"GLP","GU"=>"GUM","GT"=>"GTM","GG"=>"GGY","GN"=>"GIN","GP"=>"GLP","GW"=>"GNB","GY"=>"GUY","HT"=>"HTI","HM"=>"HMD","VA"=>"VAT","HN"=>"HND","IS"=>"ISL","ID"=>"IDN","IR"=>"IRN","IQ"=>"IRQ","IM"=>"IMN","JM"=>"JAM","JE"=>"JEY","JO"=>"JOR","KZ"=>"KAZ","KE"=>"KEN","KI"=>"KIR","KP"=>"PRK","KW"=>"KWT","KG"=>"KGZ","LA"=>"LAO","LV"=>"LVA","LB"=>"LBN","LS"=>"LSO","LR"=>"LBR","LS"=>"LSO","LR"=>"LBR","LY"=>"LBY","LI"=>"LIE","LT"=>"LTU","MO"=>"MAC","MK"=>"MKD","MG"=>"MDG","MW"=>"MWI","MY"=>"MYS","MV"=>"MDV","ML"=>"MLI","MT"=>"MLT","MH"=>"MHL","MQ"=>"MTQ","MR"=>"MRT","HU"=>"HUN","YT"=>"MYT","MX"=>"MEX","FM"=>"FSM","MD"=>"MDA","MC"=>"MCO","MN"=>"MNG","ME"=>"MNE","MS"=>"MSR","MA"=>"MAR","MZ"=>"MOZ","NA"=>"NAM","NR"=>"NRU","NP"=>"NPL","AN"=>"ANT","NC"=>"NCL","NI"=>"NIC","NE"=>"NER","NU"=>"NIU","NF"=>"NFK","MP"=>"MNP","OM"=>"OMN","PK"=>"PAK","PW"=>"PLW","PS"=>"PSE","PA"=>"PAN","PG"=>"PNG","PY"=>"PRY","PE"=>"PER","PH"=>"PHL","PN"=>"PCN","PR"=>"PRI","QA"=>"QAT","RE"=>"REU","RU"=>"RUS","RW"=>"RWA","BL"=>"BLM","KN"=>"KNA","LC"=>"LCA","MF"=>"MAF","PM"=>"SPM","VC"=>"VCT","WS"=>"WSM", "SM"=>"SMR", "ST"=>"STP","SA"=>"SAU", "SN"=>"SEN","RS"=>"SRB","SC"=>"SYC", "SL"=>"SLE","SI"=>"SVN","SB"=>"SLB","SO"=>"SOM","GS"=>"SGS","LK"=>"LKA","SD"=>"SDN","SR"=>"SUR","SJ"=>"SJM","SZ"=>"SWZ","SY"=>"SYR","TW"=>"TWN","TJ"=>"TJK","TZ"=>"TZA","TH"=>"THA","TK"=>"TKL","TO"=>"TON","TT"=>"TTO","TN"=>"TUN","TR"=>"TUR","TM"=>"TKM","TC"=>"TCA","TV"=>"TUV","UG"=>"UGA","UA"=>"UKR","AE"=>"ARE","UY"=>"URY","UZ"=>"UZB","VU"=>"VUT","VE"=>"VEN","VN"=>"VNM","VG"=>"VGB","VI"=>"VIR","WF"=>"WLF","EH"=>"ESH","YE"=>"YEM","ZM"=>"ZMB","ZW"=>"ZWE","AL"=>"ALB","AF"=>"AFG","AQ"=>"ATA","BA"=>"BIH","BV"=>"BVT","IO"=>"IOT","BG"=>"BGR","KY"=>"CYM","CX"=>"CXR","CC"=>"CCK","CK"=>"COK","GF"=>"GUF","PF"=>"PYF","TF"=>"ATF","AX"=>"ALA");
		$address = new Address(intval($params['cart']->id_address_invoice));
		$customer = new Customer(intval($params['cart']->id_customer));
		$account_id= Configuration::get('ACCOUNT_ID');
		$mode = Configuration::get('MODE');
		$id_currency = intval(Configuration::get('PS_CURRENCY_DEFAULT'));

		$currency = new Currency(intval($id_currency));
		$countryiso2=new Country(intval($address->id_country));
		$countryiso2->iso_code=$countryarray[$countryiso2->iso_code];
		$state=new State($address->id_state);
		if (!Validate::isLoadedObject($address) OR !Validate::isLoadedObject($customer))
			return $this->l('EBS error: (invalid address or customer)');
		
		$conf = Configuration::getMultiple(array('ACCOUNT_ID',
												'SECRET_KEY',
												'MODE'));		
		$secret_key = array_key_exists('secret_key', $_POST) ? $_POST['secret_key'] : (array_key_exists('SECRET_KEY', $conf) ? $conf['SECRET_KEY'] : '');
		
		//Calculate secure hash
		$return_url = 'http://'.htmlspecialchars($_SERVER['HTTP_HOST'], ENT_COMPAT, 'UTF-8').__PS_BASE_URI__.'modules/EBS/thank-you.php?DR={DR}&cart_id='.intval($cart->id);
		$cartID = intval($cart->id);
		$amount = number_format(Tools::convertPrice($params['cart']->getOrderTotal(true, 3), $currency), 2, '.', '');
		$securehashstring = "$secret_key|$account_id|$amount|$cartID|$return_url|$mode";
		$secure_hash = md5($securehashstring);

		$smarty->assign(array(
            'this_path' => $this->_path,
			'account_id' => $account_id,
			'address' => $address,
			'country' => $countryiso2,
			'state'	=> $state->name,
			'customer' => $customer,
			//'business' => $business,
			'currency' => $currency,
			'mode'	=> $mode,
			'EBSUrl' => $this->getEBSUrl(),
			//'products' => $products,
			'total' => number_format(Tools::convertPrice($params['cart']->getOrderTotal(true, 3), $currency), 2, '.', ''),
			'id_cart' => intval($params['cart']->id),
			'customer' => $customer,
			//'currency' => $this->currency,
			//'products' => $this->products,
			'cartID' => intval($cart->id),
			'return_url' => 'http://'.htmlspecialchars($_SERVER['HTTP_HOST'], ENT_COMPAT, 'UTF-8').__PS_BASE_URI__.'modules/EBS/thank-you.php?DR={DR}&cart_id='.intval($cart->id),
            'this_path_ssl' => (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://').htmlspecialchars($_SERVER['HTTP_HOST'], ENT_COMPAT, 'UTF-8').__PS_BASE_URI__.'modules/'.$this->name.'/',
			'secure_hash' => $secure_hash
        ));
		//var_dump($result);
        return $this->display(__FILE__, 'EBS.tpl');
    }
	
	
	/**
	 * Used outside of the payment hook to populate smarty vars
	 *
	 */
    public function populatePaymentVars()
    {
		global $smarty, $cart, $cookie;

		$address = new Address(intval($cart->id_address_invoice));
		$addressShip = new Address(intval($cart->id_address_delivery));
		$state = new State(intval($address->id_state));
		$address->state = $state->name;
		$state = new State(intval($addressShip->id_state));
		$addressShip->state = $state->name;

		$customer = new Customer(intval($cookie->id_customer));

		$account_id = Configuration::get('ACCOUNT_ID');

		$secret_key = Configuration::get('SECRET_KEY');
			
		$mode = Configuration::get('MODE');

		$id_currency = intval(Configuration::get('PS_CURRENCY_DEFAULT'));
		$this->currency = new Currency(intval($id_currency));

		$this->products = $cart->getProducts();


		foreach ($this->products as $key => $product)
		{
			$this->products[$key]['name'] = str_replace('"', '\'', $product['name']);
			if (isset($product['attributes']))
				$this->products[$key]['attributes'] = str_replace('"', '\'', $product['attributes']);
			$this->products[$key]['name'] = htmlentities(utf8_decode($product['name']));
			$this->products[$key]['EBSAmount'] = number_format(Tools::convertPrice($product['price_wt'], $this->currency), 2, '.', '');
		}
		
		$smarty->assign(array(
			'EBSUrl' => $this->getEBSUrl()
		));

    }

	/**
	 * Attempts to finalize an accepted transaction
	 *
	 * @result string Should be 'accepted' unless something has gone quite wrong
	 */
    public function finalizeOrder($response)
    {
    	global $smarty, $cart, $cookie;
		require(dirname(__FILE__).'/Rc43.php');
		
		$DR=$response;

		$secret_key = Configuration::get('SECRET_KEY');
		
		if(isset($DR)) {

			 $DR = preg_replace("/\s/","+",$DR);
			
			 $rc4 = new Crypt_RC4($secret_key);
			 $QueryString = base64_decode($DR);
			
			 $rc4->decrypt($QueryString);
			 $QueryString = split('&',$QueryString);

			 $response = array();
			 foreach($QueryString as $param){
				$param = split('=',$param);
				$response[$param[0]] = urldecode($param[1]);
			}	
	}
	
	$cartID=$response['MerchantRefNo'];

		$cart = new Cart($cartID);

	if($response['ResponseCode']==0){
		$responseMsg="Your Order has Been Processed";
		$responseCode = 0;
		
	}
	else {
		$responseMsg="Transaction Failed, Retry!!";
		$responseCode = 1;
	}

		//$cart = new Cart(intval($response['MerchantRefNo']));

		if (!$cart->id)
			return $this->l('Cart not found');
			
			if($response['ResponseCode']==0)
			{
				//$status=Configuration::get('EBS_ID_ORDER_SUCCESS');
				$customer = new Customer(intval($cookie->id_customer));

				if($customer->verification_status != 2)
					$status=Configuration::get('PS_OS_CUSTOMER_VERIFICATION_PENDING');
				else
					$status=Configuration::get('PS_OS_ORDERPLACED');

				if($cookie->dash == 1)// order placed via elite portal
				{
					if($cookie->child_approver != 1)
					{
						$payment_mode ='EBS';
						$order = new Order($cookie->child_id_order);
						$order->updateOrderPayment($payment_mode);
					}
				
				}
				
			}
			else if($response['ResponseCode']==1 or $response['ResponseCode']==2)
				$status=Configuration::get('EBS_ID_ORDER_FAILED');
				
		if($response['ResponseCode']==0)
		{
			$this->validateOrder($response['MerchantRefNo'], $status, $response['Amount'], $this->displayName, $this->l('EBS transaction ID: ') . $response['PaymentID'], $response['ResponseMessage']);
			
			$cookie->child_id_order=0;
			$cookie->child_approver = 0;
			$cookie->dash = 0;
		}
		//if($response['ResponseCode']==0)
			//Tools::redirectLink(__PS_BASE_URI__.'order.php');
		$id_order = Order::getOrderByCartId((int)($cart->id));
		$cart_detail = new Cart((int)($cart->id));
        $order_total_true = $cart_detail->getOrderTotal(true);
        $order_total_false = $cart_detail->getOrderTotal(false);
        $order_shipping = $cart_detail->getOrderShippingCost();
        $order_total = $cart_detail->getOrderTotal();

        $orderObj = new Order((int)($id_order));
        $products = $orderObj->getProductsDetail((int)($id_order));

        $smarty->assign(array(
                'id_order' => $id_order,
                'order_value' => $order_total_false,
                'products' => $products,
                'tax_rate' => ($order_total_true - $order_total_false)
            ));
		
		global $cookie, $smarty;
		$smarty->assign(array('this_path' => $this->_path,
					'responseMsg'	=> $responseMsg,
					'responseCode' => $responseCode,
					'this_path_ssl' => (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://').htmlspecialchars($_SERVER['HTTP_HOST'], ENT_COMPAT, 'UTF-8').__PS_BASE_URI__.'modules/'.$this->name.'/'
					));
		
		return $this->display(__FILE__, 'thank-you.tpl');
    }
	
	public function hookPaymentReturn($params)
	{				
		return $this->display(__FILE__, 'thank-you.tpl');
	}
	/*created by srini for dash EBS payment*/
	public function dashEBSPayment($params)
	{
		global $smarty,$cart;
		$countryarray=array("IN"=>"IND","DE"=>"DEU","BR"=>"BRA","DE"=>"DEU","AT"=>"AUT","BE"=>"BEL","CA"=>"CAN","CN"=>"CHN","ES"=>"ESP","FI"=>"FIN","FR"=>"FRA","GR"=>"GRC","IT"=>"ITA","JP"=>"JPN","LU"=>"LUX","NL"=>"NLD","PL"=>"POL","PT"=>"PRT","CZ"=>"CZE","GB"=>"GBR","SE"=>"SWE","CH"=>"CHE","DK"=>"DNK","US"=>"USA","HK"=>"HKG","NO"=>"NOR","AU"=>"AUS","SG"=>"SGP","IE"=>"IRL","NZ"=>"NZL","KR"=>"KOR","IL"=>"ISR","ZA"=>"ZAF","NG"=>"NGA","CI"=>"CIV","TG"=>"TGO","BO"=>"BOL","MU"=>"MUS","RO"=>"ROU","SK"=>"SVK","DZ"=>"DZA","AS"=>"ASM","AD"=>"AND","AO"=>"AGO","AI"=>"AIA","AG"=>"ATG","AR"=>"ARG","AM"=>"ARM","AW"=>"ARW","AZ"=>"AZE","BS"=>"BHS","BH"=>"BHR","BD"=>"BGD","BB"=>"BRB","BY"=>"BLR","BZ"=>"BLZ","BJ"=>"BEN","BM"=>"BMU","BT"=>"BTN","BW"=>"BWA","BN"=>"BRN","BF"=>"BFA","MM"=>"MMR","BI"=>"BDI","KH"=>"KHM","CM"=>"CMR","CV"=>"CPV","CF"=>"CAF","TD"=>"TCD","CL"=>"CHL","CO"=>"COL","KM"=>"COM","CD"=>"COD","CG"=>"COG","CR"=>"CRI","HR"=>"HRV","CU"=>"CUB","CY"=>"CYP","DJ"=>"DJI","DM"=>"DMA","DO"=>"DOM","TL"=>"TLS","EC"=>"ECU","EG"=>"EGY","SV"=>"SLV","GQ"=>"GNQ","ER"=>"ERI","EE"=>"EST","ET"=>"ETH","FK"=>"FLK","FO"=>"FRO","FJ"=>"FJI","GA"=>"GAB","GM"=>"GMB","GE"=>"GEO","GH"=>"GHA","GD"=>"GRD","GL"=>"GRL","GI"=>"GIB","GP"=>"GLP","GU"=>"GUM","GT"=>"GTM","GG"=>"GGY","GN"=>"GIN","GP"=>"GLP","GW"=>"GNB","GY"=>"GUY","HT"=>"HTI","HM"=>"HMD","VA"=>"VAT","HN"=>"HND","IS"=>"ISL","ID"=>"IDN","IR"=>"IRN","IQ"=>"IRQ","IM"=>"IMN","JM"=>"JAM","JE"=>"JEY","JO"=>"JOR","KZ"=>"KAZ","KE"=>"KEN","KI"=>"KIR","KP"=>"PRK","KW"=>"KWT","KG"=>"KGZ","LA"=>"LAO","LV"=>"LVA","LB"=>"LBN","LS"=>"LSO","LR"=>"LBR","LS"=>"LSO","LR"=>"LBR","LY"=>"LBY","LI"=>"LIE","LT"=>"LTU","MO"=>"MAC","MK"=>"MKD","MG"=>"MDG","MW"=>"MWI","MY"=>"MYS","MV"=>"MDV","ML"=>"MLI","MT"=>"MLT","MH"=>"MHL","MQ"=>"MTQ","MR"=>"MRT","HU"=>"HUN","YT"=>"MYT","MX"=>"MEX","FM"=>"FSM","MD"=>"MDA","MC"=>"MCO","MN"=>"MNG","ME"=>"MNE","MS"=>"MSR","MA"=>"MAR","MZ"=>"MOZ","NA"=>"NAM","NR"=>"NRU","NP"=>"NPL","AN"=>"ANT","NC"=>"NCL","NI"=>"NIC","NE"=>"NER","NU"=>"NIU","NF"=>"NFK","MP"=>"MNP","OM"=>"OMN","PK"=>"PAK","PW"=>"PLW","PS"=>"PSE","PA"=>"PAN","PG"=>"PNG","PY"=>"PRY","PE"=>"PER","PH"=>"PHL","PN"=>"PCN","PR"=>"PRI","QA"=>"QAT","RE"=>"REU","RU"=>"RUS","RW"=>"RWA","BL"=>"BLM","KN"=>"KNA","LC"=>"LCA","MF"=>"MAF","PM"=>"SPM","VC"=>"VCT","WS"=>"WSM", "SM"=>"SMR", "ST"=>"STP","SA"=>"SAU", "SN"=>"SEN","RS"=>"SRB","SC"=>"SYC", "SL"=>"SLE","SI"=>"SVN","SB"=>"SLB","SO"=>"SOM","GS"=>"SGS","LK"=>"LKA","SD"=>"SDN","SR"=>"SUR","SJ"=>"SJM","SZ"=>"SWZ","SY"=>"SYR","TW"=>"TWN","TJ"=>"TJK","TZ"=>"TZA","TH"=>"THA","TK"=>"TKL","TO"=>"TON","TT"=>"TTO","TN"=>"TUN","TR"=>"TUR","TM"=>"TKM","TC"=>"TCA","TV"=>"TUV","UG"=>"UGA","UA"=>"UKR","AE"=>"ARE","UY"=>"URY","UZ"=>"UZB","VU"=>"VUT","VE"=>"VEN","VN"=>"VNM","VG"=>"VGB","VI"=>"VIR","WF"=>"WLF","EH"=>"ESH","YE"=>"YEM","ZM"=>"ZMB","ZW"=>"ZWE","AL"=>"ALB","AF"=>"AFG","AQ"=>"ATA","BA"=>"BIH","BV"=>"BVT","IO"=>"IOT","BG"=>"BGR","KY"=>"CYM","CX"=>"CXR","CC"=>"CCK","CK"=>"COK","GF"=>"GUF","PF"=>"PYF","TF"=>"ATF","AX"=>"ALA");
		$address = new Address(intval($params['cart']->id_address_invoice));
		$customer = new Customer(intval($params['cart']->id_customer));
		$account_id= Configuration::get('ACCOUNT_ID');
		$mode = Configuration::get('MODE');
		$id_currency = intval(Configuration::get('PS_CURRENCY_DEFAULT'));
		$currency = new Currency(intval($id_currency));
		
		
		
		
		$countryiso2=new Country(intval($address->id_country));
		
		$countryiso2->iso_code=$countryarray[$countryiso2->iso_code];
		
		
		$state=new State($address->id_state);
		
		
		if (!Validate::isLoadedObject($address) OR !Validate::isLoadedObject($customer))
		
			return $this->l('EBS error: (invalid address or customer)');
		
		$conf = Configuration::getMultiple(array('ACCOUNT_ID',
												'SECRET_KEY',
												'MODE'));	
			
		$secret_key = array_key_exists('secret_key', $_POST) ? $_POST['secret_key'] : (array_key_exists('SECRET_KEY', $conf) ? $conf['SECRET_KEY'] : '');
		//var_dump($secret_key);
		
		//Calculate secure hash
		$return_url = 'http://'.htmlspecialchars($_SERVER['HTTP_HOST'], ENT_COMPAT, 'UTF-8').__PS_BASE_URI__.'modules/EBS/thank-you.php?DR={DR}&cart_id='.intval($cart->id);
		$cartID = intval($cart->id);
		$amount = number_format(Tools::convertPrice($params['cart']->getOrderTotal(true, 3), $currency), 2, '.', '');
		
		$securehashstring = "$secret_key|$account_id|$amount|$cartID|$return_url|$mode";
		
		$secure_hash = md5($securehashstring);
		
 		$result=array(
            'this_path' =>  __PS_BASE_URI__.'modules/EBS/',//issue
			'account_id' => $account_id,
			'address' => $address,
			'country' => $countryiso2,
			'state'	=> $state->name,
			'customer' => $customer,
			//'business' => $business,//null
			'currency' => $currency,
			'mode'	=> $mode,
			'EBSUrl' => self::getEBSUrl(),
			//'products' => $products,//null
			'total' => number_format(Tools::convertPrice($params['cart']->getOrderTotal(true, 3), $currency), 2, '.', ''),
			'id_cart' => intval($params['cart']->id),
			'customer' => $customer,
			'currency' => $this->currency,
			'products' => $this->products,//null
			'cartID' => intval($cart->id),
			'return_url' => 'http://'.htmlspecialchars($_SERVER['HTTP_HOST'], ENT_COMPAT, 'UTF-8').__PS_BASE_URI__.'modules/EBS/thank-you.php?DR={DR}&cart_id='.intval($cart->id),
            'this_path_ssl' => (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://').htmlspecialchars($_SERVER['HTTP_HOST'], ENT_COMPAT, 'UTF-8').__PS_BASE_URI__.'modules/EBS/',
			'secure_hash' => $secure_hash
        );
        return $result;
    }
}
?>
